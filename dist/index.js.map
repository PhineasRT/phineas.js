{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import EventEmitter from 'events'\nimport { last, initial } from 'lodash'\nimport rp from 'request-promise'\nimport io from 'socket.io-client'\n\nconst RP_SERVER = 'http://localhost:3001'\nconst SOCKET_SERVER = 'http://localhost:3000';\nlet socket = io(SOCKET_SERVER)\n\nlet log = console.log.bind(console, '[sdk]')\nlog(`RP_SERVER: ${RP_SERVER} | socketio-server: ${SOCKET_SERVER}`)\n\nlet clientId = null   // socketId send by server on connect event\nlet connected = null  // whether the socket connection has been made or not\nlet subscriptionQueue = []\n\nclass Phineas extends EventEmitter {\n\n  constructor (tableName) {\n    super()\n    this.tableName = tableName\n  }\n\n  withTable (tableName) {\n    this.tableName = tableName\n    return this\n  }\n\n  /**\n   * subscribe to a query\n   * @param  {string}    subName - subscription name\n   * @param  {...[any]} args - args to pass to subscription, except the last one, which is a callback\n   * @return {Phineas}          returns a new instance of Phineas\n   */\n  subscribe (subName, ...args) {\n    let instance = new Phineas(this.tableName)\n\n    // queue messages until connection is made\n    if (!connected) {\n      subscriptionQueue.push({instance: instance, subName: subName, args: args})\n      return instance\n    }\n\n    return subscribePhineasInstance.call(instance, subName, args)\n  }\n\n  callOnce (subName, ...args) {\n    if (!(last(args) instanceof Function)) {\n      console.warn('[WARN] no callback function specified. A function (err, result) { } should be provided ' +\n        'as last argument to callOnce.')\n      args.push(dummyCallback)\n    }\n\n    let subArgs = initial(args)\n    let callback = last(args)\n\n    httpSubscribe.call(this, subName, subArgs, callback)\n  }\n}\n\n/**\n * make a subscription -\n * 1. http call to get initial data,\n * 2. websocet connection to get updates\n *\n * @param  {string} subName - subscription name\n * @param  {array} args - args to subscriptions\n * @return {Phineas} Phineas instance on which it is called\n */\nfunction subscribePhineasInstance (subName, args) {\n  let self = this\n\n  if (!self.tableName) {\n    console.error('table name not specified')\n    return self\n  }\n\n  if (!(last(args) instanceof Function)) {\n    console.warn('[WARN] no callback function specified. A function (err, result) { } should be provided ' +\n      'as last argument to subscribe.')\n    args.push(dummyCallback)\n  }\n\n  let callback = last(args)    // last arg as callback\n  let subArgs = initial(args)  // args to pass to subscription request (all except last)\n  log(`subscribe request for ${self.tableName} with args ${JSON.stringify(subArgs)}`)\n\n  httpSubscribe.call(self, subName, subArgs, callback)\n  wsSubscribe.call(self, subName, subArgs)\n\n  return self\n}\n\nfunction dummyCallback (err, response) {\n  if (err) {\n    console.error(err)\n    console.trace()\n  }\n}\n\nfunction httpSubscribe (subName, subArgs, callback = dummyCallback) {\n  let reqOptions = {\n    method: 'POST',\n    uri: RP_SERVER + `/fetch/${subName}`,\n    body: {\n      args: subArgs,\n      tableName: this.tableName\n    },\n    json: true\n  }\n\n  rp(reqOptions)\n    .then(function (res) {\n      log('Got response:', res)\n      callback(null, res)\n    })\n    .catch(function (err) {\n      console.error('Error executing subscribe request', err)\n      callback(err)\n    })\n}\n\n/**\n * web socket stuff below\n */\nsocket.on('connected', function (clientId) {\n  log('connected')\n  clientId = clientId\n  connected = true\n\n  // drain queue once subscription is made\n  subscriptionQueue.forEach(function (subscriptionParams) {\n    let {instance, subName, args} = subscriptionParams\n    subscribePhineasInstance.call(instance, subName, args)\n  })\n\n  subscriptionQueue = []\n})\n\n// web-socket subscribe request\nfunction wsSubscribe (subName, subArgs) {\n  let self = this\n  let reqParams = {\n    subscriptionName: subName,\n    args: subArgs,\n    tableName: self.tableName,\n    clientId: clientId\n  }\n  socket.emit('subscribe', reqParams)\n  socket.on('db:update', function (msg) {\n    log('db:update', msg)\n    var event = JSON.parse(msg.notification)\n    self.emit(event.eventType, event);\n  })\n}\n\nexport default Phineas\n"],"sourceRoot":"/source/"}